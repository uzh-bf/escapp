#!/usr/bin/env node

/**
 * Module dependencies.
 */

var httpApp = require('../app');
var httpsApp = require('../app');
var io = require('../io');
var debug = require('debug')('web:server');
var http = require('http');
var https = require('https');

const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  /**
   * Get port from environment and store in Express.
   */
  if (httpApp.get("env") === "production" && !process.env.HEROKU && Boolean(process.env.APP_SSL)) {
    var httpServer;
    var port = normalizePort('443');
    var fs = require('fs');
    var https = require('https');
    httpsApp.set('port', port);
    var privateKey  = fs.readFileSync('/etc/ssl/private/escapp.dit.upm.es.llave.pem', 'utf8');
    var certificate = fs.readFileSync('/etc/ssl/certs/escapp.dit.upm.es.certificado.pem', 'utf8');
    var ca = fs.readFileSync('/etc/ssl/certs/cadDigiCertCA.pem', 'utf8');

    var credentials = {key: privateKey, cert: certificate, ca};
    httpServer = https.createServer(credentials, httpsApp);
    global.io = io.createServer(httpServer, httpsApp.sessionMiddleware);
    httpServer.listen(port);
    httpServer.on('error', onError);
    httpServer.on('listening', onListening);
  }
    var port = normalizePort(process.env.PORT || '3000');
    httpApp.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(httpApp);
    if (httpApp.get("env") !== "production" && !process.env.HEROKU) {
      global.io = io.createServer(server, httpApp.sessionMiddleware);
    }
    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    console.log(`Worker ${process.pid} started`);
}



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = this.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
